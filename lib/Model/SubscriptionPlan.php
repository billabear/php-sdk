<?php
/**
 * SubscriptionPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  BillaBear
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BillaBear
 *
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BillaBear\Model;

use \ArrayAccess;
use \BillaBear\ObjectSerializer;

/**
 * SubscriptionPlan Class Doc Comment
 *
 * @category Class
 * @package  BillaBear
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'code_name' => 'string',
        'user_count' => 'int',
        'per_seat' => 'bool',
        'has_trial' => 'bool',
        'free' => 'bool',
        'public' => 'bool',
        'limits' => '\BillaBear\Model\Limit[]',
        'features' => '\BillaBear\Model\Feature[]',
        'product' => '\BillaBear\Model\Product',
        'prices' => '\BillaBear\Model\Price[]',
        'trial_length_days' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'name' => null,
        'code_name' => null,
        'user_count' => null,
        'per_seat' => null,
        'has_trial' => null,
        'free' => null,
        'public' => null,
        'limits' => null,
        'features' => null,
        'product' => null,
        'prices' => null,
        'trial_length_days' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'code_name' => 'code_name',
        'user_count' => 'user_count',
        'per_seat' => 'per_seat',
        'has_trial' => 'has_trial',
        'free' => 'free',
        'public' => 'public',
        'limits' => 'limits',
        'features' => 'features',
        'product' => 'product',
        'prices' => 'prices',
        'trial_length_days' => 'trial_length_days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'code_name' => 'setCodeName',
        'user_count' => 'setUserCount',
        'per_seat' => 'setPerSeat',
        'has_trial' => 'setHasTrial',
        'free' => 'setFree',
        'public' => 'setPublic',
        'limits' => 'setLimits',
        'features' => 'setFeatures',
        'product' => 'setProduct',
        'prices' => 'setPrices',
        'trial_length_days' => 'setTrialLengthDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'code_name' => 'getCodeName',
        'user_count' => 'getUserCount',
        'per_seat' => 'getPerSeat',
        'has_trial' => 'getHasTrial',
        'free' => 'getFree',
        'public' => 'getPublic',
        'limits' => 'getLimits',
        'features' => 'getFeatures',
        'product' => 'getProduct',
        'prices' => 'getPrices',
        'trial_length_days' => 'getTrialLengthDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['code_name'] = isset($data['code_name']) ? $data['code_name'] : null;
        $this->container['user_count'] = isset($data['user_count']) ? $data['user_count'] : null;
        $this->container['per_seat'] = isset($data['per_seat']) ? $data['per_seat'] : null;
        $this->container['has_trial'] = isset($data['has_trial']) ? $data['has_trial'] : null;
        $this->container['free'] = isset($data['free']) ? $data['free'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['limits'] = isset($data['limits']) ? $data['limits'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['prices'] = isset($data['prices']) ? $data['prices'] : null;
        $this->container['trial_length_days'] = isset($data['trial_length_days']) ? $data['trial_length_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code_name
     *
     * @return string
     */
    public function getCodeName()
    {
        return $this->container['code_name'];
    }

    /**
     * Sets code_name
     *
     * @param string $code_name code_name
     *
     * @return $this
     */
    public function setCodeName($code_name)
    {
        $this->container['code_name'] = $code_name;

        return $this;
    }

    /**
     * Gets user_count
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['user_count'];
    }

    /**
     * Sets user_count
     *
     * @param int $user_count user_count
     *
     * @return $this
     */
    public function setUserCount($user_count)
    {
        $this->container['user_count'] = $user_count;

        return $this;
    }

    /**
     * Gets per_seat
     *
     * @return bool
     */
    public function getPerSeat()
    {
        return $this->container['per_seat'];
    }

    /**
     * Sets per_seat
     *
     * @param bool $per_seat per_seat
     *
     * @return $this
     */
    public function setPerSeat($per_seat)
    {
        $this->container['per_seat'] = $per_seat;

        return $this;
    }

    /**
     * Gets has_trial
     *
     * @return bool
     */
    public function getHasTrial()
    {
        return $this->container['has_trial'];
    }

    /**
     * Sets has_trial
     *
     * @param bool $has_trial has_trial
     *
     * @return $this
     */
    public function setHasTrial($has_trial)
    {
        $this->container['has_trial'] = $has_trial;

        return $this;
    }

    /**
     * Gets free
     *
     * @return bool
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param bool $free free
     *
     * @return $this
     */
    public function setFree($free)
    {
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool $public public
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return \BillaBear\Model\Limit[]
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param \BillaBear\Model\Limit[] $limits limits
     *
     * @return $this
     */
    public function setLimits($limits)
    {
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \BillaBear\Model\Feature[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \BillaBear\Model\Feature[] $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \BillaBear\Model\Product
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \BillaBear\Model\Product $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return \BillaBear\Model\Price[]
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param \BillaBear\Model\Price[] $prices prices
     *
     * @return $this
     */
    public function setPrices($prices)
    {
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets trial_length_days
     *
     * @return int
     */
    public function getTrialLengthDays()
    {
        return $this->container['trial_length_days'];
    }

    /**
     * Sets trial_length_days
     *
     * @param int $trial_length_days trial_length_days
     *
     * @return $this
     */
    public function setTrialLengthDays($trial_length_days)
    {
        $this->container['trial_length_days'] = $trial_length_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
