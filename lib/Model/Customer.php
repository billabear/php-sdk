<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  BillaBear
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BillaBear
 *
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BillaBear\Model;

use \ArrayAccess;
use \BillaBear\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  BillaBear
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'email' => 'string',
        'tax_number' => 'string',
        'standard_tax_rate' => 'float',
        'digital_tax_rate' => 'float',
        'billing_type' => 'string',
        'type' => 'string',
        'reference' => 'string',
        'external_reference' => 'string',
        'address' => '\BillaBear\Model\Address',
        'locale' => 'string',
        'brand' => 'string',
        'invoice_format' => 'string',
        'marketing_opt_in' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'email' => null,
        'tax_number' => null,
        'standard_tax_rate' => null,
        'digital_tax_rate' => null,
        'billing_type' => null,
        'type' => null,
        'reference' => null,
        'external_reference' => null,
        'address' => null,
        'locale' => null,
        'brand' => null,
        'invoice_format' => null,
        'marketing_opt_in' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'email' => 'email',
        'tax_number' => 'tax_number',
        'standard_tax_rate' => 'standard_tax_rate',
        'digital_tax_rate' => 'digital_tax_rate',
        'billing_type' => 'billing_type',
        'type' => 'type',
        'reference' => 'reference',
        'external_reference' => 'external_reference',
        'address' => 'address',
        'locale' => 'locale',
        'brand' => 'brand',
        'invoice_format' => 'invoice_format',
        'marketing_opt_in' => 'marketing_opt_in'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'email' => 'setEmail',
        'tax_number' => 'setTaxNumber',
        'standard_tax_rate' => 'setStandardTaxRate',
        'digital_tax_rate' => 'setDigitalTaxRate',
        'billing_type' => 'setBillingType',
        'type' => 'setType',
        'reference' => 'setReference',
        'external_reference' => 'setExternalReference',
        'address' => 'setAddress',
        'locale' => 'setLocale',
        'brand' => 'setBrand',
        'invoice_format' => 'setInvoiceFormat',
        'marketing_opt_in' => 'setMarketingOptIn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'email' => 'getEmail',
        'tax_number' => 'getTaxNumber',
        'standard_tax_rate' => 'getStandardTaxRate',
        'digital_tax_rate' => 'getDigitalTaxRate',
        'billing_type' => 'getBillingType',
        'type' => 'getType',
        'reference' => 'getReference',
        'external_reference' => 'getExternalReference',
        'address' => 'getAddress',
        'locale' => 'getLocale',
        'brand' => 'getBrand',
        'invoice_format' => 'getInvoiceFormat',
        'marketing_opt_in' => 'getMarketingOptIn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BILLING_TYPE_CARD = 'card';
    const BILLING_TYPE_INVOICE = 'invoice';
    const TYPE_INDIVIDUAL = 'individual';
    const TYPE_BUSINESS = 'business';
    const INVOICE_FORMAT_PDF = 'pdf';
    const INVOICE_FORMAT_XRECHNUNG = 'xrechnung';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingTypeAllowableValues()
    {
        return [
            self::BILLING_TYPE_CARD,
            self::BILLING_TYPE_INVOICE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INDIVIDUAL,
            self::TYPE_BUSINESS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceFormatAllowableValues()
    {
        return [
            self::INVOICE_FORMAT_PDF,
            self::INVOICE_FORMAT_XRECHNUNG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['tax_number'] = isset($data['tax_number']) ? $data['tax_number'] : null;
        $this->container['standard_tax_rate'] = isset($data['standard_tax_rate']) ? $data['standard_tax_rate'] : null;
        $this->container['digital_tax_rate'] = isset($data['digital_tax_rate']) ? $data['digital_tax_rate'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['invoice_format'] = isset($data['invoice_format']) ? $data['invoice_format'] : null;
        $this->container['marketing_opt_in'] = isset($data['marketing_opt_in']) ? $data['marketing_opt_in'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        $allowedValues = $this->getBillingTypeAllowableValues();
        if (!is_null($this->container['billing_type']) && !in_array($this->container['billing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'billing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvoiceFormatAllowableValues();
        if (!is_null($this->container['invoice_format']) && !in_array($this->container['invoice_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets tax_number
     *
     * @return string
     */
    public function getTaxNumber()
    {
        return $this->container['tax_number'];
    }

    /**
     * Sets tax_number
     *
     * @param string $tax_number The tax number for the customer <strong>Since 1.1</strong>
     *
     * @return $this
     */
    public function setTaxNumber($tax_number)
    {
        $this->container['tax_number'] = $tax_number;

        return $this;
    }

    /**
     * Gets standard_tax_rate
     *
     * @return float
     */
    public function getStandardTaxRate()
    {
        return $this->container['standard_tax_rate'];
    }

    /**
     * Sets standard_tax_rate
     *
     * @param float $standard_tax_rate The tax rate for the customer on for standard services a <strong>Since 1.1</strong>
     *
     * @return $this
     */
    public function setStandardTaxRate($standard_tax_rate)
    {
        $this->container['standard_tax_rate'] = $standard_tax_rate;

        return $this;
    }

    /**
     * Gets digital_tax_rate
     *
     * @return float
     */
    public function getDigitalTaxRate()
    {
        return $this->container['digital_tax_rate'];
    }

    /**
     * Sets digital_tax_rate
     *
     * @param float $digital_tax_rate The tax rate for the customer on digital services <strong>Since 1.1</strong>
     *
     * @return $this
     */
    public function setDigitalTaxRate($digital_tax_rate)
    {
        $this->container['digital_tax_rate'] = $digital_tax_rate;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return string
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param string $billing_type Choice between card and invoice
     *
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $allowedValues = $this->getBillingTypeAllowableValues();
        if (!is_null($billing_type) && !in_array($billing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Choice between 'individual' and 'business'. When not provided 'individual' is used. <strong>Since 1.1</strong>
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string $external_reference external_reference
     *
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \BillaBear\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \BillaBear\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Defaults to 'en' if not sent.
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand Defaults to 'default' if not sent.
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets invoice_format
     *
     * @return string
     */
    public function getInvoiceFormat()
    {
        return $this->container['invoice_format'];
    }

    /**
     * Sets invoice_format
     *
     * @param string $invoice_format Choice between 'pdf' and 'xrechnung'. <strong>Since 2024.02.01</strong>
     *
     * @return $this
     */
    public function setInvoiceFormat($invoice_format)
    {
        $allowedValues = $this->getInvoiceFormatAllowableValues();
        if (!is_null($invoice_format) && !in_array($invoice_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_format'] = $invoice_format;

        return $this;
    }

    /**
     * Gets marketing_opt_in
     *
     * @return bool
     */
    public function getMarketingOptIn()
    {
        return $this->container['marketing_opt_in'];
    }

    /**
     * Sets marketing_opt_in
     *
     * @param bool $marketing_opt_in If the customer has opted in for marketing
     *
     * @return $this
     */
    public function setMarketingOptIn($marketing_opt_in)
    {
        $this->container['marketing_opt_in'] = $marketing_opt_in;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
