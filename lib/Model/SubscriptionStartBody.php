<?php
/**
 * SubscriptionStartBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  BillaBear
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BillaBear
 *
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BillaBear\Model;

use \ArrayAccess;
use \BillaBear\ObjectSerializer;

/**
 * SubscriptionStartBody Class Doc Comment
 *
 * @category Class
 * @package  BillaBear
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionStartBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'subscription_start_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subscription_plan' => 'string',
        'payment_details' => 'string',
        'card_token' => 'string',
        'price' => 'string',
        'schedule' => 'string',
        'currency' => 'string',
        'seat_numbrers' => 'int',
        'deny_trial' => 'Bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subscription_plan' => 'uuid',
        'payment_details' => 'uuid',
        'card_token' => null,
        'price' => 'uuid',
        'schedule' => null,
        'currency' => null,
        'seat_numbrers' => null,
        'deny_trial' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscription_plan' => 'subscription_plan',
        'payment_details' => 'payment_details',
        'card_token' => 'card_token',
        'price' => 'price',
        'schedule' => 'schedule',
        'currency' => 'currency',
        'seat_numbrers' => 'seat_numbrers',
        'deny_trial' => 'deny_trial'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscription_plan' => 'setSubscriptionPlan',
        'payment_details' => 'setPaymentDetails',
        'card_token' => 'setCardToken',
        'price' => 'setPrice',
        'schedule' => 'setSchedule',
        'currency' => 'setCurrency',
        'seat_numbrers' => 'setSeatNumbrers',
        'deny_trial' => 'setDenyTrial'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscription_plan' => 'getSubscriptionPlan',
        'payment_details' => 'getPaymentDetails',
        'card_token' => 'getCardToken',
        'price' => 'getPrice',
        'schedule' => 'getSchedule',
        'currency' => 'getCurrency',
        'seat_numbrers' => 'getSeatNumbrers',
        'deny_trial' => 'getDenyTrial'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCHEDULE_WEEK = 'week';
    const SCHEDULE_MONTH = 'month';
    const SCHEDULE_YEAR = 'year';
    const SCHEDULE_ONE_OFF = 'one-off';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleAllowableValues()
    {
        return [
            self::SCHEDULE_WEEK,
            self::SCHEDULE_MONTH,
            self::SCHEDULE_YEAR,
            self::SCHEDULE_ONE_OFF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subscription_plan'] = isset($data['subscription_plan']) ? $data['subscription_plan'] : null;
        $this->container['payment_details'] = isset($data['payment_details']) ? $data['payment_details'] : null;
        $this->container['card_token'] = isset($data['card_token']) ? $data['card_token'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['seat_numbrers'] = isset($data['seat_numbrers']) ? $data['seat_numbrers'] : null;
        $this->container['deny_trial'] = isset($data['deny_trial']) ? $data['deny_trial'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subscription_plan'] === null) {
            $invalidProperties[] = "'subscription_plan' can't be null";
        }
        $allowedValues = $this->getScheduleAllowableValues();
        if (!is_null($this->container['schedule']) && !in_array($this->container['schedule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'schedule', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscription_plan
     *
     * @return string
     */
    public function getSubscriptionPlan()
    {
        return $this->container['subscription_plan'];
    }

    /**
     * Sets subscription_plan
     *
     * @param string $subscription_plan The ID for the subscription plan to be used (Can also be the code name)
     *
     * @return $this
     */
    public function setSubscriptionPlan($subscription_plan)
    {
        $this->container['subscription_plan'] = $subscription_plan;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return string
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param string $payment_details The Id for the customer's payment details to be used
     *
     * @return $this
     */
    public function setPaymentDetails($payment_details)
    {
        $this->container['payment_details'] = $payment_details;

        return $this;
    }

    /**
     * Gets card_token
     *
     * @return string
     */
    public function getCardToken()
    {
        return $this->container['card_token'];
    }

    /**
     * Sets card_token
     *
     * @param string $card_token A stripe card token that's been created using Stripe's js sdk. It'll create the payment details for the customer.
     *
     * @return $this
     */
    public function setCardToken($card_token)
    {
        $this->container['card_token'] = $card_token;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price The ID for the price to be used
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string $schedule The schedule of the plan that is to be started. Only used if price isn't given. Requires currency as well.
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $allowedValues = $this->getScheduleAllowableValues();
        if (!is_null($schedule) && !in_array($schedule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'schedule', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency of the plan that is to be started. Only used if price isn't given. Requires schedule as well.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets seat_numbrers
     *
     * @return int
     */
    public function getSeatNumbrers()
    {
        return $this->container['seat_numbrers'];
    }

    /**
     * Sets seat_numbrers
     *
     * @param int $seat_numbrers seat_numbrers
     *
     * @return $this
     */
    public function setSeatNumbrers($seat_numbrers)
    {
        $this->container['seat_numbrers'] = $seat_numbrers;

        return $this;
    }

    /**
     * Gets deny_trial
     *
     * @return Bool
     */
    public function getDenyTrial()
    {
        return $this->container['deny_trial'];
    }

    /**
     * Sets deny_trial
     *
     * @param Bool $deny_trial deny_trial
     *
     * @return $this
     */
    public function setDenyTrial($deny_trial)
    {
        $this->container['deny_trial'] = $deny_trial;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
